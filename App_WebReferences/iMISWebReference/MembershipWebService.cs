//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.33440.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="MembershipWebServiceSoap", Namespace="http://imis.com/webservices/membership")]
public partial class MembershipWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback LoginAndReturnSerializedAppPrincipalOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginWithSerializedAppPrincipalOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginUserAndProvideCookiesOperationCompleted;
    
    private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDatabaseInformationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRolesWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRolesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserTypeWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLogonAnnouncementOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogoutOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserForAuthenticatedUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GeneratePasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateImisUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateImisUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback RegisterWebUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteImisUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteImisUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRequiresQuestionAndAnswerWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetRequiresQuestionAndAnswerOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordQuestionAndAnswerWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordQuestionAndAnswerOperationCompleted;
    
    private System.Threading.SendOrPostCallback UnlockUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback UnlockUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback RequestLogonRecoverOperationCompleted;
    
    private System.Threading.SendOrPostCallback RequestPasswordResetOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserPasswordResetTokenOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserKeyFromPasswordResetTokenOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeUsernameWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeUsernameOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeUsernameForUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeUsernameForUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUsernameChangesEnabledOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserPasswordWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserPasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetUserPassword2OperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindUsersByNameWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback FindUsersByNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersWithLoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetPropertyValueOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPropertyTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetPropertyValueOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetIsAnonymousOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLastActivityDateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLastUpdatedDateOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
    
    /// <remarks/>
    public MembershipWebService() {
        this.Url = "http://10.1.3.206/imis15/AsiCommon/Services/Membership/MembershipWebService.asmx";
    }
    
    /// <remarks/>
    public event LoginAndReturnSerializedAppPrincipalCompletedEventHandler LoginAndReturnSerializedAppPrincipalCompleted;
    
    /// <remarks/>
    public event LoginWithSerializedAppPrincipalCompletedEventHandler LoginWithSerializedAppPrincipalCompleted;
    
    /// <remarks/>
    public event LoginUserCompletedEventHandler LoginUserCompleted;
    
    /// <remarks/>
    public event LoginUserAndProvideCookiesCompletedEventHandler LoginUserAndProvideCookiesCompleted;
    
    /// <remarks/>
    public event ValidateUserCompletedEventHandler ValidateUserCompleted;
    
    /// <remarks/>
    public event GetDatabaseInformationCompletedEventHandler GetDatabaseInformationCompleted;
    
    /// <remarks/>
    public event GetRolesWithLoginCompletedEventHandler GetRolesWithLoginCompleted;
    
    /// <remarks/>
    public event GetRolesCompletedEventHandler GetRolesCompleted;
    
    /// <remarks/>
    public event GetUserTypeWithLoginCompletedEventHandler GetUserTypeWithLoginCompleted;
    
    /// <remarks/>
    public event GetUserTypeCompletedEventHandler GetUserTypeCompleted;
    
    /// <remarks/>
    public event GetLogonAnnouncementCompletedEventHandler GetLogonAnnouncementCompleted;
    
    /// <remarks/>
    public event LogoutCompletedEventHandler LogoutCompleted;
    
    /// <remarks/>
    public event GetUserForAuthenticatedUserCompletedEventHandler GetUserForAuthenticatedUserCompleted;
    
    /// <remarks/>
    public event GeneratePasswordCompletedEventHandler GeneratePasswordCompleted;
    
    /// <remarks/>
    public event CreateImisUserWithLoginCompletedEventHandler CreateImisUserWithLoginCompleted;
    
    /// <remarks/>
    public event CreateImisUserCompletedEventHandler CreateImisUserCompleted;
    
    /// <remarks/>
    public event RegisterWebUserCompletedEventHandler RegisterWebUserCompleted;
    
    /// <remarks/>
    public event DeleteImisUserWithLoginCompletedEventHandler DeleteImisUserWithLoginCompleted;
    
    /// <remarks/>
    public event DeleteImisUserCompletedEventHandler DeleteImisUserCompleted;
    
    /// <remarks/>
    public event GetUserWithLoginCompletedEventHandler GetUserWithLoginCompleted;
    
    /// <remarks/>
    public event GetUserCompletedEventHandler GetUserCompleted;
    
    /// <remarks/>
    public event GetRequiresQuestionAndAnswerWithLoginCompletedEventHandler GetRequiresQuestionAndAnswerWithLoginCompleted;
    
    /// <remarks/>
    public event GetRequiresQuestionAndAnswerCompletedEventHandler GetRequiresQuestionAndAnswerCompleted;
    
    /// <remarks/>
    public event ChangePasswordQuestionAndAnswerWithLoginCompletedEventHandler ChangePasswordQuestionAndAnswerWithLoginCompleted;
    
    /// <remarks/>
    public event ChangePasswordQuestionAndAnswerCompletedEventHandler ChangePasswordQuestionAndAnswerCompleted;
    
    /// <remarks/>
    public event UnlockUserWithLoginCompletedEventHandler UnlockUserWithLoginCompleted;
    
    /// <remarks/>
    public event UnlockUserCompletedEventHandler UnlockUserCompleted;
    
    /// <remarks/>
    public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
    
    /// <remarks/>
    public event RequestLogonRecoverCompletedEventHandler RequestLogonRecoverCompleted;
    
    /// <remarks/>
    public event RequestPasswordResetCompletedEventHandler RequestPasswordResetCompleted;
    
    /// <remarks/>
    public event GetUserPasswordResetTokenCompletedEventHandler GetUserPasswordResetTokenCompleted;
    
    /// <remarks/>
    public event GetUserKeyFromPasswordResetTokenCompletedEventHandler GetUserKeyFromPasswordResetTokenCompleted;
    
    /// <remarks/>
    public event ChangeUsernameWithLoginCompletedEventHandler ChangeUsernameWithLoginCompleted;
    
    /// <remarks/>
    public event ChangeUsernameCompletedEventHandler ChangeUsernameCompleted;
    
    /// <remarks/>
    public event ChangeUsernameForUserWithLoginCompletedEventHandler ChangeUsernameForUserWithLoginCompleted;
    
    /// <remarks/>
    public event ChangeUsernameForUserCompletedEventHandler ChangeUsernameForUserCompleted;
    
    /// <remarks/>
    public event GetUsernameChangesEnabledCompletedEventHandler GetUsernameChangesEnabledCompleted;
    
    /// <remarks/>
    public event ChangePasswordWithLoginCompletedEventHandler ChangePasswordWithLoginCompleted;
    
    /// <remarks/>
    public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
    
    /// <remarks/>
    public event SetUserPasswordWithLoginCompletedEventHandler SetUserPasswordWithLoginCompleted;
    
    /// <remarks/>
    public event SetUserPasswordCompletedEventHandler SetUserPasswordCompleted;
    
    /// <remarks/>
    public event SetUserPassword2CompletedEventHandler SetUserPassword2Completed;
    
    /// <remarks/>
    public event UpdateUserWithLoginCompletedEventHandler UpdateUserWithLoginCompleted;
    
    /// <remarks/>
    public event UpdateUserCompletedEventHandler UpdateUserCompleted;
    
    /// <remarks/>
    public event FindUsersByNameWithLoginCompletedEventHandler FindUsersByNameWithLoginCompleted;
    
    /// <remarks/>
    public event FindUsersByNameCompletedEventHandler FindUsersByNameCompleted;
    
    /// <remarks/>
    public event GetAllUsersWithLoginCompletedEventHandler GetAllUsersWithLoginCompleted;
    
    /// <remarks/>
    public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
    
    /// <remarks/>
    public event SetPropertyValueCompletedEventHandler SetPropertyValueCompleted;
    
    /// <remarks/>
    public event GetPropertyTypeCompletedEventHandler GetPropertyTypeCompleted;
    
    /// <remarks/>
    public event GetPropertyValueCompletedEventHandler GetPropertyValueCompleted;
    
    /// <remarks/>
    public event GetIsAnonymousCompletedEventHandler GetIsAnonymousCompleted;
    
    /// <remarks/>
    public event GetLastActivityDateCompletedEventHandler GetLastActivityDateCompleted;
    
    /// <remarks/>
    public event GetLastUpdatedDateCompletedEventHandler GetLastUpdatedDateCompleted;
    
    /// <remarks/>
    public event GetUserNameCompletedEventHandler GetUserNameCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginAndReturnSerializedAppPrincipal", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string LoginAndReturnSerializedAppPrincipal(string username, string password) {
        object[] results = this.Invoke("LoginAndReturnSerializedAppPrincipal", new object[] {
                    username,
                    password});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLoginAndReturnSerializedAppPrincipal(string username, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginAndReturnSerializedAppPrincipal", new object[] {
                    username,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLoginAndReturnSerializedAppPrincipal(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LoginAndReturnSerializedAppPrincipalAsync(string username, string password) {
        this.LoginAndReturnSerializedAppPrincipalAsync(username, password, null);
    }
    
    /// <remarks/>
    public void LoginAndReturnSerializedAppPrincipalAsync(string username, string password, object userState) {
        if ((this.LoginAndReturnSerializedAppPrincipalOperationCompleted == null)) {
            this.LoginAndReturnSerializedAppPrincipalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginAndReturnSerializedAppPrincipalOperationCompleted);
        }
        this.InvokeAsync("LoginAndReturnSerializedAppPrincipal", new object[] {
                    username,
                    password}, this.LoginAndReturnSerializedAppPrincipalOperationCompleted, userState);
    }
    
    private void OnLoginAndReturnSerializedAppPrincipalOperationCompleted(object arg) {
        if ((this.LoginAndReturnSerializedAppPrincipalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginAndReturnSerializedAppPrincipalCompleted(this, new LoginAndReturnSerializedAppPrincipalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginWithSerializedAppPrincipal", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public LogonResultCodes LoginWithSerializedAppPrincipal(string principal) {
        object[] results = this.Invoke("LoginWithSerializedAppPrincipal", new object[] {
                    principal});
        return ((LogonResultCodes)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLoginWithSerializedAppPrincipal(string principal, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginWithSerializedAppPrincipal", new object[] {
                    principal}, callback, asyncState);
    }
    
    /// <remarks/>
    public LogonResultCodes EndLoginWithSerializedAppPrincipal(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((LogonResultCodes)(results[0]));
    }
    
    /// <remarks/>
    public void LoginWithSerializedAppPrincipalAsync(string principal) {
        this.LoginWithSerializedAppPrincipalAsync(principal, null);
    }
    
    /// <remarks/>
    public void LoginWithSerializedAppPrincipalAsync(string principal, object userState) {
        if ((this.LoginWithSerializedAppPrincipalOperationCompleted == null)) {
            this.LoginWithSerializedAppPrincipalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginWithSerializedAppPrincipalOperationCompleted);
        }
        this.InvokeAsync("LoginWithSerializedAppPrincipal", new object[] {
                    principal}, this.LoginWithSerializedAppPrincipalOperationCompleted, userState);
    }
    
    private void OnLoginWithSerializedAppPrincipalOperationCompleted(object arg) {
        if ((this.LoginWithSerializedAppPrincipalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginWithSerializedAppPrincipalCompleted(this, new LoginWithSerializedAppPrincipalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public LogonResultCodes LoginUser(string username, string password, bool staffUser) {
        object[] results = this.Invoke("LoginUser", new object[] {
                    username,
                    password,
                    staffUser});
        return ((LogonResultCodes)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLoginUser(string username, string password, bool staffUser, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginUser", new object[] {
                    username,
                    password,
                    staffUser}, callback, asyncState);
    }
    
    /// <remarks/>
    public LogonResultCodes EndLoginUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((LogonResultCodes)(results[0]));
    }
    
    /// <remarks/>
    public void LoginUserAsync(string username, string password, bool staffUser) {
        this.LoginUserAsync(username, password, staffUser, null);
    }
    
    /// <remarks/>
    public void LoginUserAsync(string username, string password, bool staffUser, object userState) {
        if ((this.LoginUserOperationCompleted == null)) {
            this.LoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserOperationCompleted);
        }
        this.InvokeAsync("LoginUser", new object[] {
                    username,
                    password,
                    staffUser}, this.LoginUserOperationCompleted, userState);
    }
    
    private void OnLoginUserOperationCompleted(object arg) {
        if ((this.LoginUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginUserAndProvideCookies", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string LoginUserAndProvideCookies(string username, string password, bool staffUser) {
        object[] results = this.Invoke("LoginUserAndProvideCookies", new object[] {
                    username,
                    password,
                    staffUser});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLoginUserAndProvideCookies(string username, string password, bool staffUser, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LoginUserAndProvideCookies", new object[] {
                    username,
                    password,
                    staffUser}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndLoginUserAndProvideCookies(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void LoginUserAndProvideCookiesAsync(string username, string password, bool staffUser) {
        this.LoginUserAndProvideCookiesAsync(username, password, staffUser, null);
    }
    
    /// <remarks/>
    public void LoginUserAndProvideCookiesAsync(string username, string password, bool staffUser, object userState) {
        if ((this.LoginUserAndProvideCookiesOperationCompleted == null)) {
            this.LoginUserAndProvideCookiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserAndProvideCookiesOperationCompleted);
        }
        this.InvokeAsync("LoginUserAndProvideCookies", new object[] {
                    username,
                    password,
                    staffUser}, this.LoginUserAndProvideCookiesOperationCompleted, userState);
    }
    
    private void OnLoginUserAndProvideCookiesOperationCompleted(object arg) {
        if ((this.LoginUserAndProvideCookiesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginUserAndProvideCookiesCompleted(this, new LoginUserAndProvideCookiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ValidateUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ValidateUser(string username, string password) {
        object[] results = this.Invoke("ValidateUser", new object[] {
                    username,
                    password});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateUser(string username, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateUser", new object[] {
                    username,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndValidateUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ValidateUserAsync(string username, string password) {
        this.ValidateUserAsync(username, password, null);
    }
    
    /// <remarks/>
    public void ValidateUserAsync(string username, string password, object userState) {
        if ((this.ValidateUserOperationCompleted == null)) {
            this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
        }
        this.InvokeAsync("ValidateUser", new object[] {
                    username,
                    password}, this.ValidateUserOperationCompleted, userState);
    }
    
    private void OnValidateUserOperationCompleted(object arg) {
        if ((this.ValidateUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetDatabaseInformation", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool GetDatabaseInformation(out string server, out string database, out string username, out string password) {
        object[] results = this.Invoke("GetDatabaseInformation", new object[0]);
        server = ((string)(results[1]));
        database = ((string)(results[2]));
        username = ((string)(results[3]));
        password = ((string)(results[4]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetDatabaseInformation(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDatabaseInformation", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetDatabaseInformation(System.IAsyncResult asyncResult, out string server, out string database, out string username, out string password) {
        object[] results = this.EndInvoke(asyncResult);
        server = ((string)(results[1]));
        database = ((string)(results[2]));
        username = ((string)(results[3]));
        password = ((string)(results[4]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetDatabaseInformationAsync() {
        this.GetDatabaseInformationAsync(null);
    }
    
    /// <remarks/>
    public void GetDatabaseInformationAsync(object userState) {
        if ((this.GetDatabaseInformationOperationCompleted == null)) {
            this.GetDatabaseInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabaseInformationOperationCompleted);
        }
        this.InvokeAsync("GetDatabaseInformation", new object[0], this.GetDatabaseInformationOperationCompleted, userState);
    }
    
    private void OnGetDatabaseInformationOperationCompleted(object arg) {
        if ((this.GetDatabaseInformationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDatabaseInformationCompleted(this, new GetDatabaseInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRolesWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string[] GetRolesWithLogin(string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("GetRolesWithLogin", new object[] {
                    loginAsUser,
                    loginPassword});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRolesWithLogin(string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRolesWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndGetRolesWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void GetRolesWithLoginAsync(string loginAsUser, string loginPassword) {
        this.GetRolesWithLoginAsync(loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void GetRolesWithLoginAsync(string loginAsUser, string loginPassword, object userState) {
        if ((this.GetRolesWithLoginOperationCompleted == null)) {
            this.GetRolesWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesWithLoginOperationCompleted);
        }
        this.InvokeAsync("GetRolesWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, this.GetRolesWithLoginOperationCompleted, userState);
    }
    
    private void OnGetRolesWithLoginOperationCompleted(object arg) {
        if ((this.GetRolesWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRolesWithLoginCompleted(this, new GetRolesWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRoles", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string[] GetRoles() {
        object[] results = this.Invoke("GetRoles", new object[0]);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRoles(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRoles", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndGetRoles(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void GetRolesAsync() {
        this.GetRolesAsync(null);
    }
    
    /// <remarks/>
    public void GetRolesAsync(object userState) {
        if ((this.GetRolesOperationCompleted == null)) {
            this.GetRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesOperationCompleted);
        }
        this.InvokeAsync("GetRoles", new object[0], this.GetRolesOperationCompleted, userState);
    }
    
    private void OnGetRolesOperationCompleted(object arg) {
        if ((this.GetRolesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRolesCompleted(this, new GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserTypeWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public UserType GetUserTypeWithLogin(string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("GetUserTypeWithLogin", new object[] {
                    loginAsUser,
                    loginPassword});
        return ((UserType)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserTypeWithLogin(string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserTypeWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public UserType EndGetUserTypeWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserType)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserTypeWithLoginAsync(string loginAsUser, string loginPassword) {
        this.GetUserTypeWithLoginAsync(loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void GetUserTypeWithLoginAsync(string loginAsUser, string loginPassword, object userState) {
        if ((this.GetUserTypeWithLoginOperationCompleted == null)) {
            this.GetUserTypeWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTypeWithLoginOperationCompleted);
        }
        this.InvokeAsync("GetUserTypeWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, this.GetUserTypeWithLoginOperationCompleted, userState);
    }
    
    private void OnGetUserTypeWithLoginOperationCompleted(object arg) {
        if ((this.GetUserTypeWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserTypeWithLoginCompleted(this, new GetUserTypeWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserType", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public UserType GetUserType() {
        object[] results = this.Invoke("GetUserType", new object[0]);
        return ((UserType)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserType(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserType", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public UserType EndGetUserType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserType)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserTypeAsync() {
        this.GetUserTypeAsync(null);
    }
    
    /// <remarks/>
    public void GetUserTypeAsync(object userState) {
        if ((this.GetUserTypeOperationCompleted == null)) {
            this.GetUserTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTypeOperationCompleted);
        }
        this.InvokeAsync("GetUserType", new object[0], this.GetUserTypeOperationCompleted, userState);
    }
    
    private void OnGetUserTypeOperationCompleted(object arg) {
        if ((this.GetUserTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserTypeCompleted(this, new GetUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLogonAnnouncement", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetLogonAnnouncement(out long logonDelaySeconds) {
        object[] results = this.Invoke("GetLogonAnnouncement", new object[0]);
        logonDelaySeconds = ((long)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLogonAnnouncement(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLogonAnnouncement", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetLogonAnnouncement(System.IAsyncResult asyncResult, out long logonDelaySeconds) {
        object[] results = this.EndInvoke(asyncResult);
        logonDelaySeconds = ((long)(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetLogonAnnouncementAsync() {
        this.GetLogonAnnouncementAsync(null);
    }
    
    /// <remarks/>
    public void GetLogonAnnouncementAsync(object userState) {
        if ((this.GetLogonAnnouncementOperationCompleted == null)) {
            this.GetLogonAnnouncementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogonAnnouncementOperationCompleted);
        }
        this.InvokeAsync("GetLogonAnnouncement", new object[0], this.GetLogonAnnouncementOperationCompleted, userState);
    }
    
    private void OnGetLogonAnnouncementOperationCompleted(object arg) {
        if ((this.GetLogonAnnouncementCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLogonAnnouncementCompleted(this, new GetLogonAnnouncementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/Logout", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Logout() {
        this.Invoke("Logout", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Logout", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogout(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogoutAsync() {
        this.LogoutAsync(null);
    }
    
    /// <remarks/>
    public void LogoutAsync(object userState) {
        if ((this.LogoutOperationCompleted == null)) {
            this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
        }
        this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
    }
    
    private void OnLogoutOperationCompleted(object arg) {
        if ((this.LogoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserForAuthenticatedUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser GetUserForAuthenticatedUser(bool userIsOnline) {
        object[] results = this.Invoke("GetUserForAuthenticatedUser", new object[] {
                    userIsOnline});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserForAuthenticatedUser(bool userIsOnline, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserForAuthenticatedUser", new object[] {
                    userIsOnline}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndGetUserForAuthenticatedUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserForAuthenticatedUserAsync(bool userIsOnline) {
        this.GetUserForAuthenticatedUserAsync(userIsOnline, null);
    }
    
    /// <remarks/>
    public void GetUserForAuthenticatedUserAsync(bool userIsOnline, object userState) {
        if ((this.GetUserForAuthenticatedUserOperationCompleted == null)) {
            this.GetUserForAuthenticatedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserForAuthenticatedUserOperationCompleted);
        }
        this.InvokeAsync("GetUserForAuthenticatedUser", new object[] {
                    userIsOnline}, this.GetUserForAuthenticatedUserOperationCompleted, userState);
    }
    
    private void OnGetUserForAuthenticatedUserOperationCompleted(object arg) {
        if ((this.GetUserForAuthenticatedUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserForAuthenticatedUserCompleted(this, new GetUserForAuthenticatedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GeneratePassword", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GeneratePassword() {
        object[] results = this.Invoke("GeneratePassword", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGeneratePassword(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GeneratePassword", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGeneratePassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GeneratePasswordAsync() {
        this.GeneratePasswordAsync(null);
    }
    
    /// <remarks/>
    public void GeneratePasswordAsync(object userState) {
        if ((this.GeneratePasswordOperationCompleted == null)) {
            this.GeneratePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePasswordOperationCompleted);
        }
        this.InvokeAsync("GeneratePassword", new object[0], this.GeneratePasswordOperationCompleted, userState);
    }
    
    private void OnGeneratePasswordOperationCompleted(object arg) {
        if ((this.GeneratePasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GeneratePasswordCompleted(this, new GeneratePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/CreateImisUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser CreateImisUserWithLogin(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("CreateImisUserWithLogin", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved,
                    loginAsUser,
                    loginPassword});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateImisUserWithLogin(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateImisUserWithLogin", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndCreateImisUserWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void CreateImisUserWithLoginAsync(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, string loginAsUser, string loginPassword) {
        this.CreateImisUserWithLoginAsync(staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void CreateImisUserWithLoginAsync(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, string loginAsUser, string loginPassword, object userState) {
        if ((this.CreateImisUserWithLoginOperationCompleted == null)) {
            this.CreateImisUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateImisUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("CreateImisUserWithLogin", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved,
                    loginAsUser,
                    loginPassword}, this.CreateImisUserWithLoginOperationCompleted, userState);
    }
    
    private void OnCreateImisUserWithLoginOperationCompleted(object arg) {
        if ((this.CreateImisUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateImisUserWithLoginCompleted(this, new CreateImisUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/CreateImisUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser CreateImisUser(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
        object[] results = this.Invoke("CreateImisUser", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateImisUser(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateImisUser", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndCreateImisUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void CreateImisUserAsync(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
        this.CreateImisUserAsync(staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, null);
    }
    
    /// <remarks/>
    public void CreateImisUserAsync(bool staffUser, bool webUser, string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object userState) {
        if ((this.CreateImisUserOperationCompleted == null)) {
            this.CreateImisUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateImisUserOperationCompleted);
        }
        this.InvokeAsync("CreateImisUser", new object[] {
                    staffUser,
                    webUser,
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved}, this.CreateImisUserOperationCompleted, userState);
    }
    
    private void OnCreateImisUserOperationCompleted(object arg) {
        if ((this.CreateImisUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateImisUserCompleted(this, new CreateImisUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RegisterWebUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser RegisterWebUser(string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
        object[] results = this.Invoke("RegisterWebUser", new object[] {
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRegisterWebUser(string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RegisterWebUser", new object[] {
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndRegisterWebUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void RegisterWebUserAsync(string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved) {
        this.RegisterWebUserAsync(contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, null);
    }
    
    /// <remarks/>
    public void RegisterWebUserAsync(string contactID, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object userState) {
        if ((this.RegisterWebUserOperationCompleted == null)) {
            this.RegisterWebUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterWebUserOperationCompleted);
        }
        this.InvokeAsync("RegisterWebUser", new object[] {
                    contactID,
                    username,
                    password,
                    email,
                    passwordQuestion,
                    passwordAnswer,
                    isApproved}, this.RegisterWebUserOperationCompleted, userState);
    }
    
    private void OnRegisterWebUserOperationCompleted(object arg) {
        if ((this.RegisterWebUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RegisterWebUserCompleted(this, new RegisterWebUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/DeleteImisUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool DeleteImisUserWithLogin(bool deleteStaffUser, bool deleteWebUser, string username, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("DeleteImisUserWithLogin", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username,
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteImisUserWithLogin(bool deleteStaffUser, bool deleteWebUser, string username, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteImisUserWithLogin", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndDeleteImisUserWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteImisUserWithLoginAsync(bool deleteStaffUser, bool deleteWebUser, string username, string loginAsUser, string loginPassword) {
        this.DeleteImisUserWithLoginAsync(deleteStaffUser, deleteWebUser, username, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void DeleteImisUserWithLoginAsync(bool deleteStaffUser, bool deleteWebUser, string username, string loginAsUser, string loginPassword, object userState) {
        if ((this.DeleteImisUserWithLoginOperationCompleted == null)) {
            this.DeleteImisUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteImisUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("DeleteImisUserWithLogin", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username,
                    loginAsUser,
                    loginPassword}, this.DeleteImisUserWithLoginOperationCompleted, userState);
    }
    
    private void OnDeleteImisUserWithLoginOperationCompleted(object arg) {
        if ((this.DeleteImisUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteImisUserWithLoginCompleted(this, new DeleteImisUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/DeleteImisUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool DeleteImisUser(bool deleteStaffUser, bool deleteWebUser, string username) {
        object[] results = this.Invoke("DeleteImisUser", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeleteImisUser(bool deleteStaffUser, bool deleteWebUser, string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteImisUser", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndDeleteImisUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void DeleteImisUserAsync(bool deleteStaffUser, bool deleteWebUser, string username) {
        this.DeleteImisUserAsync(deleteStaffUser, deleteWebUser, username, null);
    }
    
    /// <remarks/>
    public void DeleteImisUserAsync(bool deleteStaffUser, bool deleteWebUser, string username, object userState) {
        if ((this.DeleteImisUserOperationCompleted == null)) {
            this.DeleteImisUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteImisUserOperationCompleted);
        }
        this.InvokeAsync("DeleteImisUser", new object[] {
                    deleteStaffUser,
                    deleteWebUser,
                    username}, this.DeleteImisUserOperationCompleted, userState);
    }
    
    private void OnDeleteImisUserOperationCompleted(object arg) {
        if ((this.DeleteImisUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteImisUserCompleted(this, new DeleteImisUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser GetUserWithLogin(string username, bool userIsOnline, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("GetUserWithLogin", new object[] {
                    username,
                    userIsOnline,
                    loginAsUser,
                    loginPassword});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserWithLogin(string username, bool userIsOnline, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserWithLogin", new object[] {
                    username,
                    userIsOnline,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndGetUserWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserWithLoginAsync(string username, bool userIsOnline, string loginAsUser, string loginPassword) {
        this.GetUserWithLoginAsync(username, userIsOnline, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void GetUserWithLoginAsync(string username, bool userIsOnline, string loginAsUser, string loginPassword, object userState) {
        if ((this.GetUserWithLoginOperationCompleted == null)) {
            this.GetUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("GetUserWithLogin", new object[] {
                    username,
                    userIsOnline,
                    loginAsUser,
                    loginPassword}, this.GetUserWithLoginOperationCompleted, userState);
    }
    
    private void OnGetUserWithLoginOperationCompleted(object arg) {
        if ((this.GetUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserWithLoginCompleted(this, new GetUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WebServiceProxyableMembershipUser GetUser(string username, bool userIsOnline) {
        object[] results = this.Invoke("GetUser", new object[] {
                    username,
                    userIsOnline});
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUser(string username, bool userIsOnline, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUser", new object[] {
                    username,
                    userIsOnline}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser EndGetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableMembershipUser)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserAsync(string username, bool userIsOnline) {
        this.GetUserAsync(username, userIsOnline, null);
    }
    
    /// <remarks/>
    public void GetUserAsync(string username, bool userIsOnline, object userState) {
        if ((this.GetUserOperationCompleted == null)) {
            this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
        }
        this.InvokeAsync("GetUser", new object[] {
                    username,
                    userIsOnline}, this.GetUserOperationCompleted, userState);
    }
    
    private void OnGetUserOperationCompleted(object arg) {
        if ((this.GetUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRequiresQuestionAndAnswerWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool GetRequiresQuestionAndAnswerWithLogin(string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("GetRequiresQuestionAndAnswerWithLogin", new object[] {
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRequiresQuestionAndAnswerWithLogin(string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRequiresQuestionAndAnswerWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetRequiresQuestionAndAnswerWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetRequiresQuestionAndAnswerWithLoginAsync(string loginAsUser, string loginPassword) {
        this.GetRequiresQuestionAndAnswerWithLoginAsync(loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void GetRequiresQuestionAndAnswerWithLoginAsync(string loginAsUser, string loginPassword, object userState) {
        if ((this.GetRequiresQuestionAndAnswerWithLoginOperationCompleted == null)) {
            this.GetRequiresQuestionAndAnswerWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequiresQuestionAndAnswerWithLoginOperationCompleted);
        }
        this.InvokeAsync("GetRequiresQuestionAndAnswerWithLogin", new object[] {
                    loginAsUser,
                    loginPassword}, this.GetRequiresQuestionAndAnswerWithLoginOperationCompleted, userState);
    }
    
    private void OnGetRequiresQuestionAndAnswerWithLoginOperationCompleted(object arg) {
        if ((this.GetRequiresQuestionAndAnswerWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRequiresQuestionAndAnswerWithLoginCompleted(this, new GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRequiresQuestionAndAnswer", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool GetRequiresQuestionAndAnswer() {
        object[] results = this.Invoke("GetRequiresQuestionAndAnswer", new object[0]);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRequiresQuestionAndAnswer(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetRequiresQuestionAndAnswer", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetRequiresQuestionAndAnswer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetRequiresQuestionAndAnswerAsync() {
        this.GetRequiresQuestionAndAnswerAsync(null);
    }
    
    /// <remarks/>
    public void GetRequiresQuestionAndAnswerAsync(object userState) {
        if ((this.GetRequiresQuestionAndAnswerOperationCompleted == null)) {
            this.GetRequiresQuestionAndAnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequiresQuestionAndAnswerOperationCompleted);
        }
        this.InvokeAsync("GetRequiresQuestionAndAnswer", new object[0], this.GetRequiresQuestionAndAnswerOperationCompleted, userState);
    }
    
    private void OnGetRequiresQuestionAndAnswerOperationCompleted(object arg) {
        if ((this.GetRequiresQuestionAndAnswerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetRequiresQuestionAndAnswerCompleted(this, new GetRequiresQuestionAndAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordQuestionAndAnswerWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangePasswordQuestionAndAnswerWithLogin(string password, string newPasswordQuestion, string newPasswordAnswer, string loginAsUser) {
        object[] results = this.Invoke("ChangePasswordQuestionAndAnswerWithLogin", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer,
                    loginAsUser});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePasswordQuestionAndAnswerWithLogin(string password, string newPasswordQuestion, string newPasswordAnswer, string loginAsUser, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePasswordQuestionAndAnswerWithLogin", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer,
                    loginAsUser}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangePasswordQuestionAndAnswerWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordQuestionAndAnswerWithLoginAsync(string password, string newPasswordQuestion, string newPasswordAnswer, string loginAsUser) {
        this.ChangePasswordQuestionAndAnswerWithLoginAsync(password, newPasswordQuestion, newPasswordAnswer, loginAsUser, null);
    }
    
    /// <remarks/>
    public void ChangePasswordQuestionAndAnswerWithLoginAsync(string password, string newPasswordQuestion, string newPasswordAnswer, string loginAsUser, object userState) {
        if ((this.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted == null)) {
            this.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordQuestionAndAnswerWithLoginOperationCompleted);
        }
        this.InvokeAsync("ChangePasswordQuestionAndAnswerWithLogin", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer,
                    loginAsUser}, this.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted, userState);
    }
    
    private void OnChangePasswordQuestionAndAnswerWithLoginOperationCompleted(object arg) {
        if ((this.ChangePasswordQuestionAndAnswerWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordQuestionAndAnswerWithLoginCompleted(this, new ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordQuestionAndAnswer", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangePasswordQuestionAndAnswer(string password, string newPasswordQuestion, string newPasswordAnswer) {
        object[] results = this.Invoke("ChangePasswordQuestionAndAnswer", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePasswordQuestionAndAnswer(string password, string newPasswordQuestion, string newPasswordAnswer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePasswordQuestionAndAnswer", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangePasswordQuestionAndAnswer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordQuestionAndAnswerAsync(string password, string newPasswordQuestion, string newPasswordAnswer) {
        this.ChangePasswordQuestionAndAnswerAsync(password, newPasswordQuestion, newPasswordAnswer, null);
    }
    
    /// <remarks/>
    public void ChangePasswordQuestionAndAnswerAsync(string password, string newPasswordQuestion, string newPasswordAnswer, object userState) {
        if ((this.ChangePasswordQuestionAndAnswerOperationCompleted == null)) {
            this.ChangePasswordQuestionAndAnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordQuestionAndAnswerOperationCompleted);
        }
        this.InvokeAsync("ChangePasswordQuestionAndAnswer", new object[] {
                    password,
                    newPasswordQuestion,
                    newPasswordAnswer}, this.ChangePasswordQuestionAndAnswerOperationCompleted, userState);
    }
    
    private void OnChangePasswordQuestionAndAnswerOperationCompleted(object arg) {
        if ((this.ChangePasswordQuestionAndAnswerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordQuestionAndAnswerCompleted(this, new ChangePasswordQuestionAndAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UnlockUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool UnlockUserWithLogin(string username, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("UnlockUserWithLogin", new object[] {
                    username,
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnlockUserWithLogin(string username, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnlockUserWithLogin", new object[] {
                    username,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndUnlockUserWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void UnlockUserWithLoginAsync(string username, string loginAsUser, string loginPassword) {
        this.UnlockUserWithLoginAsync(username, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void UnlockUserWithLoginAsync(string username, string loginAsUser, string loginPassword, object userState) {
        if ((this.UnlockUserWithLoginOperationCompleted == null)) {
            this.UnlockUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("UnlockUserWithLogin", new object[] {
                    username,
                    loginAsUser,
                    loginPassword}, this.UnlockUserWithLoginOperationCompleted, userState);
    }
    
    private void OnUnlockUserWithLoginOperationCompleted(object arg) {
        if ((this.UnlockUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UnlockUserWithLoginCompleted(this, new UnlockUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UnlockUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool UnlockUser(string username) {
        object[] results = this.Invoke("UnlockUser", new object[] {
                    username});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnlockUser(string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnlockUser", new object[] {
                    username}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndUnlockUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void UnlockUserAsync(string username) {
        this.UnlockUserAsync(username, null);
    }
    
    /// <remarks/>
    public void UnlockUserAsync(string username, object userState) {
        if ((this.UnlockUserOperationCompleted == null)) {
            this.UnlockUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockUserOperationCompleted);
        }
        this.InvokeAsync("UnlockUser", new object[] {
                    username}, this.UnlockUserOperationCompleted, userState);
    }
    
    private void OnUnlockUserOperationCompleted(object arg) {
        if ((this.UnlockUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UnlockUserCompleted(this, new UnlockUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ResetPassword", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ResetPassword(string username, string passwordAnswer) {
        this.Invoke("ResetPassword", new object[] {
                    username,
                    passwordAnswer});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginResetPassword(string username, string passwordAnswer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ResetPassword", new object[] {
                    username,
                    passwordAnswer}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndResetPassword(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void ResetPasswordAsync(string username, string passwordAnswer) {
        this.ResetPasswordAsync(username, passwordAnswer, null);
    }
    
    /// <remarks/>
    public void ResetPasswordAsync(string username, string passwordAnswer, object userState) {
        if ((this.ResetPasswordOperationCompleted == null)) {
            this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
        }
        this.InvokeAsync("ResetPassword", new object[] {
                    username,
                    passwordAnswer}, this.ResetPasswordOperationCompleted, userState);
    }
    
    private void OnResetPasswordOperationCompleted(object arg) {
        if ((this.ResetPasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ResetPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RequestLogonRecover", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RequestLogonRecover(string username, string emailAddress, string subject, string loginUrl) {
        this.Invoke("RequestLogonRecover", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRequestLogonRecover(string username, string emailAddress, string subject, string loginUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RequestLogonRecover", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRequestLogonRecover(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RequestLogonRecoverAsync(string username, string emailAddress, string subject, string loginUrl) {
        this.RequestLogonRecoverAsync(username, emailAddress, subject, loginUrl, null);
    }
    
    /// <remarks/>
    public void RequestLogonRecoverAsync(string username, string emailAddress, string subject, string loginUrl, object userState) {
        if ((this.RequestLogonRecoverOperationCompleted == null)) {
            this.RequestLogonRecoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestLogonRecoverOperationCompleted);
        }
        this.InvokeAsync("RequestLogonRecover", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl}, this.RequestLogonRecoverOperationCompleted, userState);
    }
    
    private void OnRequestLogonRecoverOperationCompleted(object arg) {
        if ((this.RequestLogonRecoverCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestLogonRecoverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RequestPasswordReset", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RequestPasswordReset(string username, string emailAddress, string subject, string loginUrl) {
        this.Invoke("RequestPasswordReset", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRequestPasswordReset(string username, string emailAddress, string subject, string loginUrl, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RequestPasswordReset", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRequestPasswordReset(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void RequestPasswordResetAsync(string username, string emailAddress, string subject, string loginUrl) {
        this.RequestPasswordResetAsync(username, emailAddress, subject, loginUrl, null);
    }
    
    /// <remarks/>
    public void RequestPasswordResetAsync(string username, string emailAddress, string subject, string loginUrl, object userState) {
        if ((this.RequestPasswordResetOperationCompleted == null)) {
            this.RequestPasswordResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestPasswordResetOperationCompleted);
        }
        this.InvokeAsync("RequestPasswordReset", new object[] {
                    username,
                    emailAddress,
                    subject,
                    loginUrl}, this.RequestPasswordResetOperationCompleted, userState);
    }
    
    private void OnRequestPasswordResetOperationCompleted(object arg) {
        if ((this.RequestPasswordResetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestPasswordResetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserPasswordResetToken", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetUserPasswordResetToken(System.Guid userKey) {
        object[] results = this.Invoke("GetUserPasswordResetToken", new object[] {
                    userKey});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserPasswordResetToken(System.Guid userKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserPasswordResetToken", new object[] {
                    userKey}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetUserPasswordResetToken(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserPasswordResetTokenAsync(System.Guid userKey) {
        this.GetUserPasswordResetTokenAsync(userKey, null);
    }
    
    /// <remarks/>
    public void GetUserPasswordResetTokenAsync(System.Guid userKey, object userState) {
        if ((this.GetUserPasswordResetTokenOperationCompleted == null)) {
            this.GetUserPasswordResetTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPasswordResetTokenOperationCompleted);
        }
        this.InvokeAsync("GetUserPasswordResetToken", new object[] {
                    userKey}, this.GetUserPasswordResetTokenOperationCompleted, userState);
    }
    
    private void OnGetUserPasswordResetTokenOperationCompleted(object arg) {
        if ((this.GetUserPasswordResetTokenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserPasswordResetTokenCompleted(this, new GetUserPasswordResetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserKeyFromPasswordResetToken", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Guid GetUserKeyFromPasswordResetToken(string token) {
        object[] results = this.Invoke("GetUserKeyFromPasswordResetToken", new object[] {
                    token});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserKeyFromPasswordResetToken(string token, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserKeyFromPasswordResetToken", new object[] {
                    token}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Guid EndGetUserKeyFromPasswordResetToken(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserKeyFromPasswordResetTokenAsync(string token) {
        this.GetUserKeyFromPasswordResetTokenAsync(token, null);
    }
    
    /// <remarks/>
    public void GetUserKeyFromPasswordResetTokenAsync(string token, object userState) {
        if ((this.GetUserKeyFromPasswordResetTokenOperationCompleted == null)) {
            this.GetUserKeyFromPasswordResetTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserKeyFromPasswordResetTokenOperationCompleted);
        }
        this.InvokeAsync("GetUserKeyFromPasswordResetToken", new object[] {
                    token}, this.GetUserKeyFromPasswordResetTokenOperationCompleted, userState);
    }
    
    private void OnGetUserKeyFromPasswordResetTokenOperationCompleted(object arg) {
        if ((this.GetUserKeyFromPasswordResetTokenCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserKeyFromPasswordResetTokenCompleted(this, new GetUserKeyFromPasswordResetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangeUsernameWithLogin(string newUsername, string password, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("ChangeUsernameWithLogin", new object[] {
                    newUsername,
                    password,
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeUsernameWithLogin(string newUsername, string password, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeUsernameWithLogin", new object[] {
                    newUsername,
                    password,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangeUsernameWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeUsernameWithLoginAsync(string newUsername, string password, string loginAsUser, string loginPassword) {
        this.ChangeUsernameWithLoginAsync(newUsername, password, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void ChangeUsernameWithLoginAsync(string newUsername, string password, string loginAsUser, string loginPassword, object userState) {
        if ((this.ChangeUsernameWithLoginOperationCompleted == null)) {
            this.ChangeUsernameWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUsernameWithLoginOperationCompleted);
        }
        this.InvokeAsync("ChangeUsernameWithLogin", new object[] {
                    newUsername,
                    password,
                    loginAsUser,
                    loginPassword}, this.ChangeUsernameWithLoginOperationCompleted, userState);
    }
    
    private void OnChangeUsernameWithLoginOperationCompleted(object arg) {
        if ((this.ChangeUsernameWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeUsernameWithLoginCompleted(this, new ChangeUsernameWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsername", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangeUsername(string newUsername, string password) {
        object[] results = this.Invoke("ChangeUsername", new object[] {
                    newUsername,
                    password});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeUsername(string newUsername, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeUsername", new object[] {
                    newUsername,
                    password}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangeUsername(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeUsernameAsync(string newUsername, string password) {
        this.ChangeUsernameAsync(newUsername, password, null);
    }
    
    /// <remarks/>
    public void ChangeUsernameAsync(string newUsername, string password, object userState) {
        if ((this.ChangeUsernameOperationCompleted == null)) {
            this.ChangeUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUsernameOperationCompleted);
        }
        this.InvokeAsync("ChangeUsername", new object[] {
                    newUsername,
                    password}, this.ChangeUsernameOperationCompleted, userState);
    }
    
    private void OnChangeUsernameOperationCompleted(object arg) {
        if ((this.ChangeUsernameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeUsernameCompleted(this, new ChangeUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameForUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangeUsernameForUserWithLogin(string oldUsername, string newUsername, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("ChangeUsernameForUserWithLogin", new object[] {
                    oldUsername,
                    newUsername,
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeUsernameForUserWithLogin(string oldUsername, string newUsername, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeUsernameForUserWithLogin", new object[] {
                    oldUsername,
                    newUsername,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangeUsernameForUserWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeUsernameForUserWithLoginAsync(string oldUsername, string newUsername, string loginAsUser, string loginPassword) {
        this.ChangeUsernameForUserWithLoginAsync(oldUsername, newUsername, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void ChangeUsernameForUserWithLoginAsync(string oldUsername, string newUsername, string loginAsUser, string loginPassword, object userState) {
        if ((this.ChangeUsernameForUserWithLoginOperationCompleted == null)) {
            this.ChangeUsernameForUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUsernameForUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("ChangeUsernameForUserWithLogin", new object[] {
                    oldUsername,
                    newUsername,
                    loginAsUser,
                    loginPassword}, this.ChangeUsernameForUserWithLoginOperationCompleted, userState);
    }
    
    private void OnChangeUsernameForUserWithLoginOperationCompleted(object arg) {
        if ((this.ChangeUsernameForUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeUsernameForUserWithLoginCompleted(this, new ChangeUsernameForUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameForUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangeUsernameForUser(string oldUsername, string newUsername) {
        object[] results = this.Invoke("ChangeUsernameForUser", new object[] {
                    oldUsername,
                    newUsername});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeUsernameForUser(string oldUsername, string newUsername, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeUsernameForUser", new object[] {
                    oldUsername,
                    newUsername}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangeUsernameForUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeUsernameForUserAsync(string oldUsername, string newUsername) {
        this.ChangeUsernameForUserAsync(oldUsername, newUsername, null);
    }
    
    /// <remarks/>
    public void ChangeUsernameForUserAsync(string oldUsername, string newUsername, object userState) {
        if ((this.ChangeUsernameForUserOperationCompleted == null)) {
            this.ChangeUsernameForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUsernameForUserOperationCompleted);
        }
        this.InvokeAsync("ChangeUsernameForUser", new object[] {
                    oldUsername,
                    newUsername}, this.ChangeUsernameForUserOperationCompleted, userState);
    }
    
    private void OnChangeUsernameForUserOperationCompleted(object arg) {
        if ((this.ChangeUsernameForUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeUsernameForUserCompleted(this, new ChangeUsernameForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUsernameChangesEnabled", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool GetUsernameChangesEnabled() {
        object[] results = this.Invoke("GetUsernameChangesEnabled", new object[0]);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUsernameChangesEnabled(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUsernameChangesEnabled", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetUsernameChangesEnabled(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetUsernameChangesEnabledAsync() {
        this.GetUsernameChangesEnabledAsync(null);
    }
    
    /// <remarks/>
    public void GetUsernameChangesEnabledAsync(object userState) {
        if ((this.GetUsernameChangesEnabledOperationCompleted == null)) {
            this.GetUsernameChangesEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsernameChangesEnabledOperationCompleted);
        }
        this.InvokeAsync("GetUsernameChangesEnabled", new object[0], this.GetUsernameChangesEnabledOperationCompleted, userState);
    }
    
    private void OnGetUsernameChangesEnabledOperationCompleted(object arg) {
        if ((this.GetUsernameChangesEnabledCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUsernameChangesEnabledCompleted(this, new GetUsernameChangesEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangePasswordWithLogin(string oldPassword, string newPassword, string loginAsUser) {
        object[] results = this.Invoke("ChangePasswordWithLogin", new object[] {
                    oldPassword,
                    newPassword,
                    loginAsUser});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePasswordWithLogin(string oldPassword, string newPassword, string loginAsUser, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePasswordWithLogin", new object[] {
                    oldPassword,
                    newPassword,
                    loginAsUser}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangePasswordWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordWithLoginAsync(string oldPassword, string newPassword, string loginAsUser) {
        this.ChangePasswordWithLoginAsync(oldPassword, newPassword, loginAsUser, null);
    }
    
    /// <remarks/>
    public void ChangePasswordWithLoginAsync(string oldPassword, string newPassword, string loginAsUser, object userState) {
        if ((this.ChangePasswordWithLoginOperationCompleted == null)) {
            this.ChangePasswordWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordWithLoginOperationCompleted);
        }
        this.InvokeAsync("ChangePasswordWithLogin", new object[] {
                    oldPassword,
                    newPassword,
                    loginAsUser}, this.ChangePasswordWithLoginOperationCompleted, userState);
    }
    
    private void OnChangePasswordWithLoginOperationCompleted(object arg) {
        if ((this.ChangePasswordWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordWithLoginCompleted(this, new ChangePasswordWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePassword", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ChangePassword(string oldPassword, string newPassword) {
        object[] results = this.Invoke("ChangePassword", new object[] {
                    oldPassword,
                    newPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangePassword(string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangePassword", new object[] {
                    oldPassword,
                    newPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndChangePassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ChangePasswordAsync(string oldPassword, string newPassword) {
        this.ChangePasswordAsync(oldPassword, newPassword, null);
    }
    
    /// <remarks/>
    public void ChangePasswordAsync(string oldPassword, string newPassword, object userState) {
        if ((this.ChangePasswordOperationCompleted == null)) {
            this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
        }
        this.InvokeAsync("ChangePassword", new object[] {
                    oldPassword,
                    newPassword}, this.ChangePasswordOperationCompleted, userState);
    }
    
    private void OnChangePasswordOperationCompleted(object arg) {
        if ((this.ChangePasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPasswordWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool SetUserPasswordWithLogin(string username, string newPassword, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("SetUserPasswordWithLogin", new object[] {
                    username,
                    newPassword,
                    loginAsUser,
                    loginPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserPasswordWithLogin(string username, string newPassword, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserPasswordWithLogin", new object[] {
                    username,
                    newPassword,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSetUserPasswordWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserPasswordWithLoginAsync(string username, string newPassword, string loginAsUser, string loginPassword) {
        this.SetUserPasswordWithLoginAsync(username, newPassword, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void SetUserPasswordWithLoginAsync(string username, string newPassword, string loginAsUser, string loginPassword, object userState) {
        if ((this.SetUserPasswordWithLoginOperationCompleted == null)) {
            this.SetUserPasswordWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordWithLoginOperationCompleted);
        }
        this.InvokeAsync("SetUserPasswordWithLogin", new object[] {
                    username,
                    newPassword,
                    loginAsUser,
                    loginPassword}, this.SetUserPasswordWithLoginOperationCompleted, userState);
    }
    
    private void OnSetUserPasswordWithLoginOperationCompleted(object arg) {
        if ((this.SetUserPasswordWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserPasswordWithLoginCompleted(this, new SetUserPasswordWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPassword", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool SetUserPassword(string username, string newPassword) {
        object[] results = this.Invoke("SetUserPassword", new object[] {
                    username,
                    newPassword});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserPassword(string username, string newPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserPassword", new object[] {
                    username,
                    newPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSetUserPassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserPasswordAsync(string username, string newPassword) {
        this.SetUserPasswordAsync(username, newPassword, null);
    }
    
    /// <remarks/>
    public void SetUserPasswordAsync(string username, string newPassword, object userState) {
        if ((this.SetUserPasswordOperationCompleted == null)) {
            this.SetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordOperationCompleted);
        }
        this.InvokeAsync("SetUserPassword", new object[] {
                    username,
                    newPassword}, this.SetUserPasswordOperationCompleted, userState);
    }
    
    private void OnSetUserPasswordOperationCompleted(object arg) {
        if ((this.SetUserPasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserPasswordCompleted(this, new SetUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPassword2", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool SetUserPassword2(string username, string newPassword, bool sendEmail) {
        object[] results = this.Invoke("SetUserPassword2", new object[] {
                    username,
                    newPassword,
                    sendEmail});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetUserPassword2(string username, string newPassword, bool sendEmail, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetUserPassword2", new object[] {
                    username,
                    newPassword,
                    sendEmail}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndSetUserPassword2(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void SetUserPassword2Async(string username, string newPassword, bool sendEmail) {
        this.SetUserPassword2Async(username, newPassword, sendEmail, null);
    }
    
    /// <remarks/>
    public void SetUserPassword2Async(string username, string newPassword, bool sendEmail, object userState) {
        if ((this.SetUserPassword2OperationCompleted == null)) {
            this.SetUserPassword2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPassword2OperationCompleted);
        }
        this.InvokeAsync("SetUserPassword2", new object[] {
                    username,
                    newPassword,
                    sendEmail}, this.SetUserPassword2OperationCompleted, userState);
    }
    
    private void OnSetUserPassword2OperationCompleted(object arg) {
        if ((this.SetUserPassword2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetUserPassword2Completed(this, new SetUserPassword2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UpdateUserWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateUserWithLogin(WebServiceProxyableMembershipUser wsmu, string loginAsUser, string loginPassword) {
        this.Invoke("UpdateUserWithLogin", new object[] {
                    wsmu,
                    loginAsUser,
                    loginPassword});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUserWithLogin(WebServiceProxyableMembershipUser wsmu, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUserWithLogin", new object[] {
                    wsmu,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateUserWithLogin(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateUserWithLoginAsync(WebServiceProxyableMembershipUser wsmu, string loginAsUser, string loginPassword) {
        this.UpdateUserWithLoginAsync(wsmu, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void UpdateUserWithLoginAsync(WebServiceProxyableMembershipUser wsmu, string loginAsUser, string loginPassword, object userState) {
        if ((this.UpdateUserWithLoginOperationCompleted == null)) {
            this.UpdateUserWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserWithLoginOperationCompleted);
        }
        this.InvokeAsync("UpdateUserWithLogin", new object[] {
                    wsmu,
                    loginAsUser,
                    loginPassword}, this.UpdateUserWithLoginOperationCompleted, userState);
    }
    
    private void OnUpdateUserWithLoginOperationCompleted(object arg) {
        if ((this.UpdateUserWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserWithLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UpdateUser", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateUser(WebServiceProxyableMembershipUser wsmu) {
        this.Invoke("UpdateUser", new object[] {
                    wsmu});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUser(WebServiceProxyableMembershipUser wsmu, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUser", new object[] {
                    wsmu}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateUser(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateUserAsync(WebServiceProxyableMembershipUser wsmu) {
        this.UpdateUserAsync(wsmu, null);
    }
    
    /// <remarks/>
    public void UpdateUserAsync(WebServiceProxyableMembershipUser wsmu, object userState) {
        if ((this.UpdateUserOperationCompleted == null)) {
            this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
        }
        this.InvokeAsync("UpdateUser", new object[] {
                    wsmu}, this.UpdateUserOperationCompleted, userState);
    }
    
    private void OnUpdateUserOperationCompleted(object arg) {
        if ((this.UpdateUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/FindUsersByNameWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public WebServiceProxyableSearchResult FindUsersByNameWithLogin(string usernameToMatch, int pageIndex, int pageSize, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("FindUsersByNameWithLogin", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword});
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFindUsersByNameWithLogin(string usernameToMatch, int pageIndex, int pageSize, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindUsersByNameWithLogin", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult EndFindUsersByNameWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public void FindUsersByNameWithLoginAsync(string usernameToMatch, int pageIndex, int pageSize, string loginAsUser, string loginPassword) {
        this.FindUsersByNameWithLoginAsync(usernameToMatch, pageIndex, pageSize, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void FindUsersByNameWithLoginAsync(string usernameToMatch, int pageIndex, int pageSize, string loginAsUser, string loginPassword, object userState) {
        if ((this.FindUsersByNameWithLoginOperationCompleted == null)) {
            this.FindUsersByNameWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindUsersByNameWithLoginOperationCompleted);
        }
        this.InvokeAsync("FindUsersByNameWithLogin", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword}, this.FindUsersByNameWithLoginOperationCompleted, userState);
    }
    
    private void OnFindUsersByNameWithLoginOperationCompleted(object arg) {
        if ((this.FindUsersByNameWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindUsersByNameWithLoginCompleted(this, new FindUsersByNameWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/FindUsersByName", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public WebServiceProxyableSearchResult FindUsersByName(string usernameToMatch, int pageIndex, int pageSize) {
        object[] results = this.Invoke("FindUsersByName", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize});
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFindUsersByName(string usernameToMatch, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FindUsersByName", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult EndFindUsersByName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public void FindUsersByNameAsync(string usernameToMatch, int pageIndex, int pageSize) {
        this.FindUsersByNameAsync(usernameToMatch, pageIndex, pageSize, null);
    }
    
    /// <remarks/>
    public void FindUsersByNameAsync(string usernameToMatch, int pageIndex, int pageSize, object userState) {
        if ((this.FindUsersByNameOperationCompleted == null)) {
            this.FindUsersByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindUsersByNameOperationCompleted);
        }
        this.InvokeAsync("FindUsersByName", new object[] {
                    usernameToMatch,
                    pageIndex,
                    pageSize}, this.FindUsersByNameOperationCompleted, userState);
    }
    
    private void OnFindUsersByNameOperationCompleted(object arg) {
        if ((this.FindUsersByNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FindUsersByNameCompleted(this, new FindUsersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetAllUsersWithLogin", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public WebServiceProxyableSearchResult GetAllUsersWithLogin(int pageIndex, int pageSize, string loginAsUser, string loginPassword) {
        object[] results = this.Invoke("GetAllUsersWithLogin", new object[] {
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword});
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsersWithLogin(int pageIndex, int pageSize, string loginAsUser, string loginPassword, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsersWithLogin", new object[] {
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult EndGetAllUsersWithLogin(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersWithLoginAsync(int pageIndex, int pageSize, string loginAsUser, string loginPassword) {
        this.GetAllUsersWithLoginAsync(pageIndex, pageSize, loginAsUser, loginPassword, null);
    }
    
    /// <remarks/>
    public void GetAllUsersWithLoginAsync(int pageIndex, int pageSize, string loginAsUser, string loginPassword, object userState) {
        if ((this.GetAllUsersWithLoginOperationCompleted == null)) {
            this.GetAllUsersWithLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersWithLoginOperationCompleted);
        }
        this.InvokeAsync("GetAllUsersWithLogin", new object[] {
                    pageIndex,
                    pageSize,
                    loginAsUser,
                    loginPassword}, this.GetAllUsersWithLoginOperationCompleted, userState);
    }
    
    private void OnGetAllUsersWithLoginOperationCompleted(object arg) {
        if ((this.GetAllUsersWithLoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersWithLoginCompleted(this, new GetAllUsersWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetAllUsers", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public WebServiceProxyableSearchResult GetAllUsers(int pageIndex, int pageSize) {
        object[] results = this.Invoke("GetAllUsers", new object[] {
                    pageIndex,
                    pageSize});
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUsers(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUsers", new object[] {
                    pageIndex,
                    pageSize}, callback, asyncState);
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult EndGetAllUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WebServiceProxyableSearchResult)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(int pageIndex, int pageSize) {
        this.GetAllUsersAsync(pageIndex, pageSize, null);
    }
    
    /// <remarks/>
    public void GetAllUsersAsync(int pageIndex, int pageSize, object userState) {
        if ((this.GetAllUsersOperationCompleted == null)) {
            this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
        }
        this.InvokeAsync("GetAllUsers", new object[] {
                    pageIndex,
                    pageSize}, this.GetAllUsersOperationCompleted, userState);
    }
    
    private void OnGetAllUsersOperationCompleted(object arg) {
        if ((this.GetAllUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetPropertyValue", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetPropertyValue(string propertyName, object propertyValue) {
        this.Invoke("SetPropertyValue", new object[] {
                    propertyName,
                    propertyValue});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetPropertyValue(string propertyName, object propertyValue, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetPropertyValue", new object[] {
                    propertyName,
                    propertyValue}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetPropertyValue(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SetPropertyValueAsync(string propertyName, object propertyValue) {
        this.SetPropertyValueAsync(propertyName, propertyValue, null);
    }
    
    /// <remarks/>
    public void SetPropertyValueAsync(string propertyName, object propertyValue, object userState) {
        if ((this.SetPropertyValueOperationCompleted == null)) {
            this.SetPropertyValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPropertyValueOperationCompleted);
        }
        this.InvokeAsync("SetPropertyValue", new object[] {
                    propertyName,
                    propertyValue}, this.SetPropertyValueOperationCompleted, userState);
    }
    
    private void OnSetPropertyValueOperationCompleted(object arg) {
        if ((this.SetPropertyValueCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPropertyValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetPropertyType", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetPropertyType(string propertyName) {
        object[] results = this.Invoke("GetPropertyType", new object[] {
                    propertyName});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPropertyType(string propertyName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPropertyType", new object[] {
                    propertyName}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetPropertyType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetPropertyTypeAsync(string propertyName) {
        this.GetPropertyTypeAsync(propertyName, null);
    }
    
    /// <remarks/>
    public void GetPropertyTypeAsync(string propertyName, object userState) {
        if ((this.GetPropertyTypeOperationCompleted == null)) {
            this.GetPropertyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyTypeOperationCompleted);
        }
        this.InvokeAsync("GetPropertyType", new object[] {
                    propertyName}, this.GetPropertyTypeOperationCompleted, userState);
    }
    
    private void OnGetPropertyTypeOperationCompleted(object arg) {
        if ((this.GetPropertyTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPropertyTypeCompleted(this, new GetPropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetPropertyValue", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object GetPropertyValue(string propertyName) {
        object[] results = this.Invoke("GetPropertyValue", new object[] {
                    propertyName});
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPropertyValue(string propertyName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPropertyValue", new object[] {
                    propertyName}, callback, asyncState);
    }
    
    /// <remarks/>
    public object EndGetPropertyValue(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void GetPropertyValueAsync(string propertyName) {
        this.GetPropertyValueAsync(propertyName, null);
    }
    
    /// <remarks/>
    public void GetPropertyValueAsync(string propertyName, object userState) {
        if ((this.GetPropertyValueOperationCompleted == null)) {
            this.GetPropertyValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyValueOperationCompleted);
        }
        this.InvokeAsync("GetPropertyValue", new object[] {
                    propertyName}, this.GetPropertyValueOperationCompleted, userState);
    }
    
    private void OnGetPropertyValueOperationCompleted(object arg) {
        if ((this.GetPropertyValueCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPropertyValueCompleted(this, new GetPropertyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetIsAnonymous", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool GetIsAnonymous() {
        object[] results = this.Invoke("GetIsAnonymous", new object[0]);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetIsAnonymous(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetIsAnonymous", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndGetIsAnonymous(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void GetIsAnonymousAsync() {
        this.GetIsAnonymousAsync(null);
    }
    
    /// <remarks/>
    public void GetIsAnonymousAsync(object userState) {
        if ((this.GetIsAnonymousOperationCompleted == null)) {
            this.GetIsAnonymousOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIsAnonymousOperationCompleted);
        }
        this.InvokeAsync("GetIsAnonymous", new object[0], this.GetIsAnonymousOperationCompleted, userState);
    }
    
    private void OnGetIsAnonymousOperationCompleted(object arg) {
        if ((this.GetIsAnonymousCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetIsAnonymousCompleted(this, new GetIsAnonymousCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLastActivityDate", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.DateTime GetLastActivityDate() {
        object[] results = this.Invoke("GetLastActivityDate", new object[0]);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLastActivityDate(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLastActivityDate", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.DateTime EndGetLastActivityDate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public void GetLastActivityDateAsync() {
        this.GetLastActivityDateAsync(null);
    }
    
    /// <remarks/>
    public void GetLastActivityDateAsync(object userState) {
        if ((this.GetLastActivityDateOperationCompleted == null)) {
            this.GetLastActivityDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastActivityDateOperationCompleted);
        }
        this.InvokeAsync("GetLastActivityDate", new object[0], this.GetLastActivityDateOperationCompleted, userState);
    }
    
    private void OnGetLastActivityDateOperationCompleted(object arg) {
        if ((this.GetLastActivityDateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLastActivityDateCompleted(this, new GetLastActivityDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLastUpdatedDate", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.DateTime GetLastUpdatedDate() {
        object[] results = this.Invoke("GetLastUpdatedDate", new object[0]);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLastUpdatedDate(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLastUpdatedDate", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.DateTime EndGetLastUpdatedDate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public void GetLastUpdatedDateAsync() {
        this.GetLastUpdatedDateAsync(null);
    }
    
    /// <remarks/>
    public void GetLastUpdatedDateAsync(object userState) {
        if ((this.GetLastUpdatedDateOperationCompleted == null)) {
            this.GetLastUpdatedDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdatedDateOperationCompleted);
        }
        this.InvokeAsync("GetLastUpdatedDate", new object[0], this.GetLastUpdatedDateOperationCompleted, userState);
    }
    
    private void OnGetLastUpdatedDateOperationCompleted(object arg) {
        if ((this.GetLastUpdatedDateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLastUpdatedDateCompleted(this, new GetLastUpdatedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserName", RequestNamespace="http://imis.com/webservices/membership", ResponseNamespace="http://imis.com/webservices/membership", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetUserName() {
        object[] results = this.Invoke("GetUserName", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserName(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserName", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetUserName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserNameAsync() {
        this.GetUserNameAsync(null);
    }
    
    /// <remarks/>
    public void GetUserNameAsync(object userState) {
        if ((this.GetUserNameOperationCompleted == null)) {
            this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
        }
        this.InvokeAsync("GetUserName", new object[0], this.GetUserNameOperationCompleted, userState);
    }
    
    private void OnGetUserNameOperationCompleted(object arg) {
        if ((this.GetUserNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://imis.com/webservices/membership")]
public enum LogonResultCodes {
    
    /// <remarks/>
    Succeeded,
    
    /// <remarks/>
    Failed,
    
    /// <remarks/>
    LockedOut,
    
    /// <remarks/>
    Disabled,
    
    /// <remarks/>
    MaintenanceMode,
    
    /// <remarks/>
    ProductExpired,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://imis.com/webservices/membership")]
public enum UserType {
    
    /// <remarks/>
    Anonymous,
    
    /// <remarks/>
    Public,
    
    /// <remarks/>
    Casual,
    
    /// <remarks/>
    Full,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://imis.com/webservices/membership")]
public partial class WebServiceProxyableMembershipUser {
    
    private string userNameField;
    
    private string providerUserKeyField;
    
    private string emailField;
    
    private string passwordQuestionField;
    
    private string commentField;
    
    private bool isApprovedField;
    
    private bool isLockedOutField;
    
    private System.DateTime lastLockoutDateField;
    
    private System.DateTime creationDateField;
    
    private System.DateTime lastLoginDateField;
    
    private System.DateTime lastActivityDateField;
    
    private System.DateTime lastPasswordChangedDateField;
    
    private bool isOnlineField;
    
    private string providerNameField;
    
    /// <remarks/>
    public string userName {
        get {
            return this.userNameField;
        }
        set {
            this.userNameField = value;
        }
    }
    
    /// <remarks/>
    public string providerUserKey {
        get {
            return this.providerUserKeyField;
        }
        set {
            this.providerUserKeyField = value;
        }
    }
    
    /// <remarks/>
    public string email {
        get {
            return this.emailField;
        }
        set {
            this.emailField = value;
        }
    }
    
    /// <remarks/>
    public string passwordQuestion {
        get {
            return this.passwordQuestionField;
        }
        set {
            this.passwordQuestionField = value;
        }
    }
    
    /// <remarks/>
    public string comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <remarks/>
    public bool isApproved {
        get {
            return this.isApprovedField;
        }
        set {
            this.isApprovedField = value;
        }
    }
    
    /// <remarks/>
    public bool isLockedOut {
        get {
            return this.isLockedOutField;
        }
        set {
            this.isLockedOutField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime lastLockoutDate {
        get {
            return this.lastLockoutDateField;
        }
        set {
            this.lastLockoutDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime creationDate {
        get {
            return this.creationDateField;
        }
        set {
            this.creationDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime lastLoginDate {
        get {
            return this.lastLoginDateField;
        }
        set {
            this.lastLoginDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime lastActivityDate {
        get {
            return this.lastActivityDateField;
        }
        set {
            this.lastActivityDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime lastPasswordChangedDate {
        get {
            return this.lastPasswordChangedDateField;
        }
        set {
            this.lastPasswordChangedDateField = value;
        }
    }
    
    /// <remarks/>
    public bool isOnline {
        get {
            return this.isOnlineField;
        }
        set {
            this.isOnlineField = value;
        }
    }
    
    /// <remarks/>
    public string providerName {
        get {
            return this.providerNameField;
        }
        set {
            this.providerNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://imis.com/webservices/membership")]
public partial class WebServiceProxyableSearchResult {
    
    private WebServiceProxyableMembershipUser[] searchResultField;
    
    private int totalRecordsField;
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser[] SearchResult {
        get {
            return this.searchResultField;
        }
        set {
            this.searchResultField = value;
        }
    }
    
    /// <remarks/>
    public int TotalRecords {
        get {
            return this.totalRecordsField;
        }
        set {
            this.totalRecordsField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LoginAndReturnSerializedAppPrincipalCompletedEventHandler(object sender, LoginAndReturnSerializedAppPrincipalCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginAndReturnSerializedAppPrincipalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginAndReturnSerializedAppPrincipalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LoginWithSerializedAppPrincipalCompletedEventHandler(object sender, LoginWithSerializedAppPrincipalCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginWithSerializedAppPrincipalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginWithSerializedAppPrincipalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public LogonResultCodes Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LogonResultCodes)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LoginUserCompletedEventHandler(object sender, LoginUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public LogonResultCodes Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((LogonResultCodes)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LoginUserAndProvideCookiesCompletedEventHandler(object sender, LoginUserAndProvideCookiesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginUserAndProvideCookiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginUserAndProvideCookiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetDatabaseInformationCompletedEventHandler(object sender, GetDatabaseInformationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDatabaseInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDatabaseInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string server {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public string database {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public string username {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[3]));
        }
    }
    
    /// <remarks/>
    public string password {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[4]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetRolesWithLoginCompletedEventHandler(object sender, GetRolesWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRolesWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRolesWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetRolesCompletedEventHandler(object sender, GetRolesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserTypeWithLoginCompletedEventHandler(object sender, GetUserTypeWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserTypeWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserTypeWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public UserType Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((UserType)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserTypeCompletedEventHandler(object sender, GetUserTypeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public UserType Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((UserType)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetLogonAnnouncementCompletedEventHandler(object sender, GetLogonAnnouncementCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLogonAnnouncementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLogonAnnouncementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public long logonDelaySeconds {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserForAuthenticatedUserCompletedEventHandler(object sender, GetUserForAuthenticatedUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserForAuthenticatedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserForAuthenticatedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GeneratePasswordCompletedEventHandler(object sender, GeneratePasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GeneratePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GeneratePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void CreateImisUserWithLoginCompletedEventHandler(object sender, CreateImisUserWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateImisUserWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateImisUserWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void CreateImisUserCompletedEventHandler(object sender, CreateImisUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateImisUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateImisUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void RegisterWebUserCompletedEventHandler(object sender, RegisterWebUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RegisterWebUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RegisterWebUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void DeleteImisUserWithLoginCompletedEventHandler(object sender, DeleteImisUserWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteImisUserWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteImisUserWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void DeleteImisUserCompletedEventHandler(object sender, DeleteImisUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DeleteImisUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteImisUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserWithLoginCompletedEventHandler(object sender, GetUserWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableMembershipUser Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableMembershipUser)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetRequiresQuestionAndAnswerWithLoginCompletedEventHandler(object sender, GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetRequiresQuestionAndAnswerCompletedEventHandler(object sender, GetRequiresQuestionAndAnswerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetRequiresQuestionAndAnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetRequiresQuestionAndAnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangePasswordQuestionAndAnswerWithLoginCompletedEventHandler(object sender, ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangePasswordQuestionAndAnswerCompletedEventHandler(object sender, ChangePasswordQuestionAndAnswerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordQuestionAndAnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordQuestionAndAnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void UnlockUserWithLoginCompletedEventHandler(object sender, UnlockUserWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UnlockUserWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UnlockUserWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void UnlockUserCompletedEventHandler(object sender, UnlockUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UnlockUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UnlockUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ResetPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void RequestLogonRecoverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void RequestPasswordResetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserPasswordResetTokenCompletedEventHandler(object sender, GetUserPasswordResetTokenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserPasswordResetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserPasswordResetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserKeyFromPasswordResetTokenCompletedEventHandler(object sender, GetUserKeyFromPasswordResetTokenCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserKeyFromPasswordResetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserKeyFromPasswordResetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangeUsernameWithLoginCompletedEventHandler(object sender, ChangeUsernameWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeUsernameWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeUsernameWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangeUsernameCompletedEventHandler(object sender, ChangeUsernameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangeUsernameForUserWithLoginCompletedEventHandler(object sender, ChangeUsernameForUserWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeUsernameForUserWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeUsernameForUserWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangeUsernameForUserCompletedEventHandler(object sender, ChangeUsernameForUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeUsernameForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeUsernameForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUsernameChangesEnabledCompletedEventHandler(object sender, GetUsernameChangesEnabledCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUsernameChangesEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUsernameChangesEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangePasswordWithLoginCompletedEventHandler(object sender, ChangePasswordWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetUserPasswordWithLoginCompletedEventHandler(object sender, SetUserPasswordWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserPasswordWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserPasswordWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetUserPasswordCompletedEventHandler(object sender, SetUserPasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetUserPassword2CompletedEventHandler(object sender, SetUserPassword2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetUserPassword2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetUserPassword2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void UpdateUserWithLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void UpdateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void FindUsersByNameWithLoginCompletedEventHandler(object sender, FindUsersByNameWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FindUsersByNameWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindUsersByNameWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableSearchResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void FindUsersByNameCompletedEventHandler(object sender, FindUsersByNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FindUsersByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FindUsersByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableSearchResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetAllUsersWithLoginCompletedEventHandler(object sender, GetAllUsersWithLoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersWithLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersWithLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableSearchResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WebServiceProxyableSearchResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WebServiceProxyableSearchResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void SetPropertyValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetPropertyTypeCompletedEventHandler(object sender, GetPropertyTypeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPropertyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPropertyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetPropertyValueCompletedEventHandler(object sender, GetPropertyValueCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetPropertyValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPropertyValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetIsAnonymousCompletedEventHandler(object sender, GetIsAnonymousCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetIsAnonymousCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetIsAnonymousCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetLastActivityDateCompletedEventHandler(object sender, GetLastActivityDateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLastActivityDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLastActivityDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.DateTime Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetLastUpdatedDateCompletedEventHandler(object sender, GetLastUpdatedDateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLastUpdatedDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLastUpdatedDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.DateTime Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
